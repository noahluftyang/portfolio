// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url = "***"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  username  String?
  createdAt DateTime  @map("created_at") @default(now())
  updatedAt DateTime  @map("updated_at") @updatedAt
  deletedAt DateTime? @map("deleted_at")
  media     Media[]   @relation("user_media")
  comments  Comment[] @relation("user_comments")
  replies   Reply[]   @relation("user_replies")

  @@map("users")
}

model Media {
  id               Int       @id @default(autoincrement())
  url              String
  thumbnailUrl     String    @map("thumbnail_url")
  likeCount        Int       @map("like_count")
  ownerId          Int       @map("owner_id")
  owner            User      @relation("user_media", fields: [ownerId], references: [id])
  isCommentEnabled Boolean   @map("is_comment_enabled")
  createdAt        DateTime  @map("created_at") @default(now())
  updatedAt        DateTime  @map("updated_at") @updatedAt
  deletedAt        DateTime? @map("deleted_at")
  comments         Comment[] @relation("media_comments")

  @@map("media")
}

model Comment {
  id        Int       @id @default(autoincrement())
  text      String
  likeCount Int       @map("like_count")
  hidden    Boolean
  authorId  Int       @map("author_id")
  author    User      @relation("user_comments", fields: [authorId], references: [id])
  mediaId   Int       @map("media_id")
  media     Media     @relation("media_comments", fields: [mediaId], references: [id])
  createdAt DateTime  @map("created_at") @default(now())
  updatedAt DateTime  @map("updated_at") @updatedAt
  deletedAt DateTime? @map("deleted_at")
  replies   Reply[]   @relation("comment_replies")

  @@map("comments")
}

model Reply {
  id        Int       @id @default(autoincrement())
  text      String
  likeCount Int       @map("like_count")
  hidden    Boolean
  authorId  Int       @map("author_id")
  author    User      @relation("user_replies", fields: [authorId], references: [id])
  commentId Int       @map("comment_id")
  comment   Comment   @relation("comment_replies", fields: [commentId], references: [id])
  createdAt DateTime  @map("created_at") @default(now())
  updatedAt DateTime  @map("updated_at") @updatedAt
  deletedAt DateTime? @map("deleted_at")

  @@map("replies")
}
