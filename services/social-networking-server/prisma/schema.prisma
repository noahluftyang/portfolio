// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URI")
}

generator client {
  provider = "prisma-client-js"
}

// model User {
//   id             Int             @id @default(autoincrement())
//   email          String          @unique
//   password       String
//   username       String?
//   createdAt      DateTime        @map("created_at") @default(now())
//   updatedAt      DateTime        @map("updated_at") @updatedAt
//   deletedAt      DateTime?       @map("deleted_at")
//   socialAccounts SocialAccount[] @relation("user_social_accounts")
//   followers      Follow[]        @relation("user_followers")
//   following      Follow[]        @relation("user_following")
//   media          Media[]         @relation("user_media")
//   comments       Comment[]       @relation("user_comments")
//   replies        Reply[]         @relation("user_replies")

//   @@map("users")
// }

// enum Provider {
//   FACEBOOK
//   GOOGLE
// }

// model SocialAccount {
//   id       String   @id
//   userId   Int
//   user     User     @relation("user_social_accounts", fields: [userId], references: [id])
//   provider Provider

//   @@map("social_accounts")
// }

// model Follow {
//   followerId  Int  @map("follower_id")
//   follower    User @relation("user_followers", fields: [followerId], references: [id])
//   followingId Int  @map("following_id")
//   following   User @relation("user_following", fields: [followingId], references: [id])

//   @@id([followerId, followingId])
//   @@map("follows")
// }

model Media {
  id               Int       @id @default(autoincrement())
  url              String
  thumbnailUrl     String    @map("thumbnail_url")
  likeCount        Int       @map("like_count")
  ownerId          String    @map("owner_id")
  isCommentEnabled Boolean   @map("is_comment_enabled")
  createdAt        DateTime  @map("created_at") @default(now())
  updatedAt        DateTime  @map("updated_at") @updatedAt
  deletedAt        DateTime? @map("deleted_at")
  comments         Comment[] @relation("media_comments")

  @@map("media")
}

model Comment {
  id        Int       @id @default(autoincrement())
  text      String
  likeCount Int       @map("like_count")
  hidden    Boolean
  writerId  String    @map("writer_id")
  mediaId   Int       @map("media_id")
  media     Media     @relation("media_comments", fields: [mediaId], references: [id])
  createdAt DateTime  @map("created_at") @default(now())
  updatedAt DateTime  @map("updated_at") @updatedAt
  deletedAt DateTime? @map("deleted_at")
  replies   Reply[]   @relation("comment_replies")

  @@map("comments")
}

model Reply {
  id        Int       @id @default(autoincrement())
  text      String
  likeCount Int       @map("like_count")
  hidden    Boolean
  writerId  String    @map("writer_id")
  commentId Int       @map("comment_id")
  comment   Comment   @relation("comment_replies", fields: [commentId], references: [id])
  createdAt DateTime  @map("created_at") @default(now())
  updatedAt DateTime  @map("updated_at") @updatedAt
  deletedAt DateTime? @map("deleted_at")

  @@map("replies")
}
